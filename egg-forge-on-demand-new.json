{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2025-02-08T02:06:20+00:00",
    "name": "ForgeOnDemand_New",
    "author": "bolverblitz@ebg.pw",
    "description": "MSH Egg to support Forge 17+. Use the normal paper egg for older Forge versions!",
    "features": [
        "eula"
    ],
    "docker_images": {
        "Java 8": "ghcr.io\/pterodactyl\/yolks:java_8",
        "Java 11": "ghcr.io\/pterodactyl\/yolks:java_11",
        "Java 16": "ghcr.io\/pterodactyl\/yolks:java_16",
        "Java 17": "ghcr.io\/pterodactyl\/yolks:java_17",
        "Java 21": "ghcr.io\/pterodactyl\/yolks:java_21"
    },
    "file_denylist": [],
    "startup": ".\/msh_server.bin -port {{SERVER_PORT}} -d {{DEBUG_LVL}} -file {{SERVER_JARFILE}} -allowkill {{KILL_TIME}} -timeout {{TBSES}} -suspendrefresh {{SUSPEND_REFRESH}} $( [[ ${WL_IMPORT} -eq 1 ]] && echo \" -wlimport\") $( [[ ${SUSPEND_ALLOW} -eq 1 ]] && echo \" -suspendallow\")",
    "config": {
        "files": "{\r\n    \"msh-config.json\": {\r\n        \"parser\": \"json\",\r\n        \"find\": {\r\n            \"StartServer\": \"java <Commands.StartServerParam>\",\r\n            \"FileName\": \"{{env.SERVER_JARFILE}}\",\r\n            \"Port\": \"{{server.build.default.port}}\",\r\n            \"Commands.StartServerParam\": \"-Xms256M -Xmx{{server.build.memory}}M -Dterminal.jline=false -Dterminal.ansi=true @unix_args.txt\"\r\n        }\r\n    },\r\n    \"server.properties\": {\r\n        \"parser\": \"properties\",\r\n        \"find\": {\r\n            \"server-ip\": \"0.0.0.0\",\r\n            \"server-port\": \"25565\"\r\n        }\r\n    }\r\n}",
        "startup": "{\r\n    \"done\": \"listening for new clients\"\r\n}",
        "logs": "{}",
        "stop": "^C"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\r\n# Forge Installation Script\r\n#\r\n# Server Files: \/mnt\/server\r\n\r\n# Function to log with timestamp\r\nlog() {\r\n    echo \"[$(date '+%Y-%m-%d %H:%M:%S')] $1\"\r\n}\r\n\r\n# Function to handle errors\r\nhandle_error() {\r\n    log \"ERROR: $1\"\r\n    exit 1\r\n}\r\n\r\n# Function to cleanup on exit\r\ncleanup() {\r\n    local exit_code=$?\r\n    if [ -f installer.jar ]; then\r\n        log \"Cleaning up installer.jar\"\r\n        rm -f installer.jar\r\n    fi\r\n    if [ $exit_code -ne 0 ]; then\r\n        log \"Installation failed with exit code $exit_code\"\r\n    fi\r\n    exit $exit_code\r\n}\r\n\r\n# Set strict error handling\r\nset -euo pipefail\r\ntrap 'cleanup' EXIT\r\ntrap 'echo \"Error on line $LINENO. Exit code: $?\"' ERR\r\n\r\n# Function to validate version format\r\nvalidate_version() {\r\n    local version=$1\r\n    # Check if it's a combined version (MC-Forge)\r\n    if [[ $version =~ ^[0-9]+\\.[0-9]+\\.[0-9]+-[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then\r\n        # Format: 1.20.1-47.3.0\r\n        return 0\r\n    elif [[ $version =~ ^[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then\r\n        # Format: 47.3.0 (old style)\r\n        return 0\r\n    else\r\n        handle_error \"Invalid version format: $version. Expected format: 1.20.1-47.3.0 or 47.3.0\"\r\n    fi\r\n}\r\n\r\n# Function to check Java version\r\ncheck_java() {\r\n    if ! command -v java >\/dev\/null 2>&1; then\r\n        handle_error \"Java is not installed\"\r\n    fi\r\n    local java_version=$(java -version 2>&1 | awk -F '\"' '\/version\/ {print $2}')\r\n    log \"Detected Java version: $java_version\"\r\n    # Add version check based on MC version if needed\r\n}\r\n\r\n# Function to validate memory settings\r\nvalidate_memory() {\r\n    local xms=$(echo \"$1\" | grep -o \"Xms[0-9]*M\" | grep -o \"[0-9]*\")\r\n    local xmx=$(echo \"$1\" | grep -o \"Xmx[0-9]*M\" | grep -o \"[0-9]*\")\r\n    if [ -n \"$xms\" ] && [ -n \"$xmx\" ]; then\r\n        if [ \"$xms\" -gt \"$xmx\" ]; then\r\n            handle_error \"Initial memory (Xms) cannot be greater than maximum memory (Xmx)\"\r\n        fi\r\n    fi\r\n}\r\n\r\n# Add Java check\r\ncheck_java\r\n\r\n# Function to download with timeout and retry\r\ndownload_with_timeout() {\r\n    local url=$1\r\n    local output=$2\r\n    local timeout=300  # 5 minutes timeout\r\n    local retries=3\r\n    local wait=10\r\n\r\n    for ((i=1; i<=retries; i++)); do\r\n        if curl -sSL --connect-timeout 30 --max-time $timeout --retry 3 --output \"$output\" \"$url\"; then\r\n            return 0\r\n        else\r\n            log \"Download attempt $i failed. Waiting $wait seconds before retry...\"\r\n            sleep $wait\r\n        fi\r\n    done\r\n    handle_error \"Failed to download after $retries attempts: $url\"\r\n}\r\n\r\n# Install required packages\r\napt update || handle_error \"Failed to update package list\"\r\napt install -y curl jq || handle_error \"Failed to install required packages\"\r\n\r\n# Create server directory if it doesn't exist\r\nif [[ ! -d \/mnt\/server ]]; then\r\n    mkdir -p \/mnt\/server || handle_error \"Failed to create server directory\"\r\nfi\r\n\r\ncd \/mnt\/server || handle_error \"Failed to change to server directory\"\r\n\r\n# Remove spaces from version numbers\r\nFORGE_VERSION=\"$(echo \"$FORGE_VERSION\" | tr -d ' ')\"\r\nMC_VERSION=\"$(echo \"$MC_VERSION\" | tr -d ' ')\"\r\n\r\n# Forge version determination\r\nif [[ ! -z ${FORGE_VERSION} ]]; then\r\n    # Check if FORGE_VERSION already includes MC version\r\n    if [[ $FORGE_VERSION =~ ^[0-9]+\\.[0-9]+\\.[0-9]+-[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then\r\n        # Already in correct format (e.g., 1.20.1-47.3.0)\r\n        FULL_FORGE_VERSION=\"${FORGE_VERSION}\"\r\n        # Extract MC version if not provided\r\n        if [[ -z ${MC_VERSION} ]] || [[ ${MC_VERSION} == \"latest\" ]]; then\r\n            MC_VERSION=$(echo ${FORGE_VERSION} | cut -d'-' -f1)\r\n        fi\r\n    else\r\n        # Need to combine MC_VERSION and FORGE_VERSION\r\n        validate_version \"$FORGE_VERSION\"\r\n        FULL_FORGE_VERSION=\"${MC_VERSION}-${FORGE_VERSION}\"\r\n    fi\r\n    \r\n    DOWNLOAD_LINK=https:\/\/maven.minecraftforge.net\/net\/minecraftforge\/forge\/${FULL_FORGE_VERSION}\/forge-${FULL_FORGE_VERSION}\r\n    FORGE_JAR=forge-${FULL_FORGE_VERSION}*.jar\r\n    FORGE_SERVER_JAR=\"libraries\/net\/minecraftforge\/forge\/${FULL_FORGE_VERSION}\/forge-${FULL_FORGE_VERSION}-server.jar\"\r\nelse\r\n    log \"Fetching Forge version information...\"\r\n    JSON_DATA=$(curl -sSL --connect-timeout 30 --max-time 60 https:\/\/files.minecraftforge.net\/maven\/net\/minecraftforge\/forge\/promotions_slim.json) || handle_error \"Failed to fetch Forge version data\"\r\n\r\n    if [[ \"${MC_VERSION}\" == \"latest\" ]] || [[ \"${MC_VERSION}\" == \"\" ]]; then\r\n        log \"Getting latest Minecraft version\"\r\n        MC_VERSION=$(echo -e ${JSON_DATA} | jq -r '.promos | del(.\"latest-1.7.10\") | del(.\"1.7.10-latest-1.7.10\") | to_entries[] | .key | select(contains(\"latest\")) | split(\"-\")[0]' | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n | tail -1)\r\n        BUILD_TYPE=latest\r\n    fi\r\n\r\n    if [[ \"${BUILD_TYPE}\" != \"recommended\" ]] && [[ \"${BUILD_TYPE}\" != \"latest\" ]]; then\r\n        BUILD_TYPE=recommended\r\n    fi\r\n\r\n    log \"Minecraft version: ${MC_VERSION}\"\r\n    log \"Build type: ${BUILD_TYPE}\"\r\n\r\n    FILE_SITE=https:\/\/maven.minecraftforge.net\/net\/minecraftforge\/forge\/\r\n    VERSION_KEY=$(echo -e ${JSON_DATA} | jq -r --arg MC_VERSION \"${MC_VERSION}-\" --arg BUILD_TYPE \"${BUILD_TYPE}\" '.promos | del(.\"latest-1.7.10\") | del(.\"1.7.10-latest-1.7.10\") | to_entries[] | .key | select(contains($MC_VERSION)) | select(contains($BUILD_TYPE))')\r\n\r\n    if [[ \"${VERSION_KEY}\" == \"\" ]] && [[ \"${BUILD_TYPE}\" == \"recommended\" ]]; then\r\n        log \"No recommended version found, falling back to latest\"\r\n        VERSION_KEY=$(echo -e ${JSON_DATA} | jq -r --arg MC_VERSION \"${MC_VERSION}\" '.promos | del(.\"latest-1.7.10\") | del(.\"1.7.10-latest-1.7.10\") | to_entries[] | .key | select(contains($MC_VERSION)) | select(contains(\"latest\"))')\r\n    fi\r\n\r\n    if [ \"${VERSION_KEY}\" == \"\" ] || [ \"${VERSION_KEY}\" == \"null\" ]; then\r\n        handle_error \"No valid Forge version found for Minecraft ${MC_VERSION}\"\r\n    fi\r\n\r\n    FORGE_VERSION=$(echo -e ${JSON_DATA} | jq -r --arg VERSION_KEY \"$VERSION_KEY\" '.promos | .[$VERSION_KEY]')\r\n    validate_version \"$FORGE_VERSION\"\r\n\r\n    if [[ \"${MC_VERSION}\" == \"1.7.10\" ]] || [[ \"${MC_VERSION}\" == \"1.8.9\" ]]; then\r\n        DOWNLOAD_LINK=${FILE_SITE}${MC_VERSION}-${FORGE_VERSION}-${MC_VERSION}\/forge-${MC_VERSION}-${FORGE_VERSION}-${MC_VERSION}\r\n        FORGE_JAR=forge-${MC_VERSION}-${FORGE_VERSION}-${MC_VERSION}.jar\r\n        if [[ \"${MC_VERSION}\" == \"1.7.10\" ]]; then\r\n            FORGE_JAR=forge-${MC_VERSION}-${FORGE_VERSION}-${MC_VERSION}-universal.jar\r\n        fi\r\n    else\r\n        DOWNLOAD_LINK=${FILE_SITE}${MC_VERSION}-${FORGE_VERSION}\/forge-${MC_VERSION}-${FORGE_VERSION}\r\n        FORGE_JAR=forge-${MC_VERSION}-${FORGE_VERSION}.jar\r\n    fi\r\nfi\r\n\r\n# Ensure SERVER_JARFILE ends with .jar\r\nif [[ ! $SERVER_JARFILE = *\\.jar ]]; then\r\n    SERVER_JARFILE=\"$SERVER_JARFILE.jar\"\r\nfi\r\n\r\n# Download Forge installer\r\nlog \"Downloading Forge version ${FORGE_VERSION}\"\r\nlog \"Download link: ${DOWNLOAD_LINK}\"\r\n\r\nif [[ -z \"${DOWNLOAD_LINK}\" ]]; then\r\n    handle_error \"No download link provided\"\r\nfi\r\n\r\n# Verify download link\r\nif ! curl -sSL --output \/dev\/null --head --fail --connect-timeout 30 \"${DOWNLOAD_LINK}-installer.jar\"; then\r\n    handle_error \"Invalid download link: ${DOWNLOAD_LINK}-installer.jar\"\r\nfi\r\n\r\ndownload_with_timeout \"${DOWNLOAD_LINK}-installer.jar\" \"installer.jar\"\r\n\r\n# Verify installer exists\r\nif [[ ! -f .\/installer.jar ]]; then\r\n    handle_error \"Forge installer download failed\"\r\nfi\r\n\r\n# Function for unix args setup\r\nfunction unix_args {\r\n    log \"Setting up Forge unix args for version 1.17+\"\r\n    ln -sf libraries\/net\/minecraftforge\/forge\/*\/unix_args.txt unix_args.txt\r\n}\r\n\r\n# Clean up old files\r\nrm -rf libraries\/net\/minecraftforge\/forge\r\nrm -f unix_args.txt\r\n\r\n# Install server\r\nlog \"Installing Forge server\"\r\njava -jar installer.jar --installServer || handle_error \"Forge installation failed\"\r\n\r\n# Setup args for newer versions\r\nif [[ $MC_VERSION =~ ^1\\.(17|18|19|20|21|22|23) || $FORGE_VERSION =~ ^1\\.(17|18|19|20|21|22|23) ]]; then\r\n    # For newer versions, the server jar is already in place\r\n    log \"Using Forge server jar for newer version\"\r\n    log \"Looking for Forge server jar at: ${FORGE_SERVER_JAR}\"\r\n    \r\n    if [ -f \"${FORGE_SERVER_JAR}\" ]; then\r\n        log \"Found Forge server jar, copying to root\"\r\n        cp \"${FORGE_SERVER_JAR}\" \"server.jar\"\r\n        # Copy unix args file\r\n        UNIX_ARGS=\"libraries\/net\/minecraftforge\/forge\/${FULL_FORGE_VERSION}\/unix_args.txt\"\r\n        if [ -f \"${UNIX_ARGS}\" ]; then\r\n            log \"Copying unix_args.txt to root\"\r\n            cp \"${UNIX_ARGS}\" \"unix_args.txt\"\r\n        else\r\n            handle_error \"Could not find unix_args.txt at ${UNIX_ARGS}\"\r\n        fi\r\n    else\r\n        # Try alternate path format\r\n        ALTERNATE_PATH=\"libraries\/net\/minecraftforge\/forge\/1.20.1-47.2.20\/forge-1.20.1-47.2.20-server.jar\"\r\n        if [ -f \"${ALTERNATE_PATH}\" ]; then\r\n            log \"Found Forge server jar at alternate path, copying to root\"\r\n            cp \"${ALTERNATE_PATH}\" \"server.jar\"\r\n            # Try alternate unix args path\r\n            ALT_UNIX_ARGS=\"libraries\/net\/minecraftforge\/forge\/1.20.1-47.2.20\/unix_args.txt\"\r\n            if [ -f \"${ALT_UNIX_ARGS}\" ]; then\r\n                log \"Copying unix_args.txt to root\"\r\n                cp \"${ALT_UNIX_ARGS}\" \"unix_args.txt\"\r\n            else\r\n                handle_error \"Could not find unix_args.txt at ${ALT_UNIX_ARGS}\"\r\n            fi\r\n        else\r\n            # List contents to help debug\r\n            log \"Debug: Listing forge directory contents:\"\r\n            ls -R libraries\/net\/minecraftforge\/forge\/\r\n            handle_error \"Could not find Forge server jar after installation at ${FORGE_SERVER_JAR} or ${ALTERNATE_PATH}\"\r\n        fi\r\n    fi\r\nelif [[ $MC_VERSION == \"latest\" && $FORGE_VERSION =~ ^1\\.(17|18|19|20|21|22|23) ]]; then\r\n    # For newer versions with latest MC, the server jar is already in place\r\n    log \"Using Forge server jar for newer version (latest MC)\"\r\n    log \"Looking for Forge server jar at: ${FORGE_SERVER_JAR}\"\r\n    \r\n    if [ -f \"${FORGE_SERVER_JAR}\" ]; then\r\n        log \"Found Forge server jar, copying to root\"\r\n        cp \"${FORGE_SERVER_JAR}\" \"server.jar\"\r\n        # Copy unix args file\r\n        UNIX_ARGS=\"libraries\/net\/minecraftforge\/forge\/${FULL_FORGE_VERSION}\/unix_args.txt\"\r\n        if [ -f \"${UNIX_ARGS}\" ]; then\r\n            log \"Copying unix_args.txt to root\"\r\n            cp \"${UNIX_ARGS}\" \"unix_args.txt\"\r\n        else\r\n            handle_error \"Could not find unix_args.txt at ${UNIX_ARGS}\"\r\n        fi\r\n    else\r\n        # Try alternate path format\r\n        ALTERNATE_PATH=\"libraries\/net\/minecraftforge\/forge\/1.20.1-47.2.20\/forge-1.20.1-47.2.20-server.jar\"\r\n        if [ -f \"${ALTERNATE_PATH}\" ]; then\r\n            log \"Found Forge server jar at alternate path, copying to root\"\r\n            cp \"${ALTERNATE_PATH}\" \"server.jar\"\r\n            # Try alternate unix args path\r\n            ALT_UNIX_ARGS=\"libraries\/net\/minecraftforge\/forge\/1.20.1-47.2.20\/unix_args.txt\"\r\n            if [ -f \"${ALT_UNIX_ARGS}\" ]; then\r\n                log \"Copying unix_args.txt to root\"\r\n                cp \"${ALT_UNIX_ARGS}\" \"unix_args.txt\"\r\n            else\r\n                handle_error \"Could not find unix_args.txt at ${ALT_UNIX_ARGS}\"\r\n            fi\r\n        else\r\n            # List contents to help debug\r\n            log \"Debug: Listing forge directory contents:\"\r\n            ls -R libraries\/net\/minecraftforge\/forge\/\r\n            handle_error \"Could not find Forge server jar after installation at ${FORGE_SERVER_JAR} or ${ALTERNATE_PATH}\"\r\n        fi\r\n    fi\r\nelse\r\n    # For older versions, move the forge jar to the correct location\r\n    log \"Using Forge server jar for older version\"\r\n    if [ -f \"$FORGE_JAR\" ]; then\r\n        log \"Found Forge server jar, copying to root\"\r\n        cp \"$FORGE_JAR\" \"server.jar\"\r\n    else\r\n        # List contents to help debug\r\n        log \"Debug: Listing current directory contents:\"\r\n        ls -la\r\n        handle_error \"Could not find Forge server jar after installation at ${FORGE_JAR}\"\r\n    fi\r\nfi\r\n\r\n# Verify server.jar exists in root\r\nif [ ! -f \"server.jar\" ]; then\r\n    handle_error \"Failed to copy server.jar to root directory\"\r\nfi\r\n\r\n# Backup existing server jar if it exists\r\nif [ -f \"${SERVER_JARFILE}\" ] && [ \"${SERVER_JARFILE}\" != \"server.jar\" ]; then\r\n    log \"Backing up existing server jar\"\r\n    mv \"${SERVER_JARFILE}\" \"${SERVER_JARFILE}.old\"\r\nfi\r\n\r\n# For newer versions, verify unix_args.txt exists in root\r\nif [[ $MC_VERSION =~ ^1\\.(17|18|19|20|21|22|23) || $FORGE_VERSION =~ ^1\\.(17|18|19|20|21|22|23) ]]; then\r\n    if [ ! -f \"unix_args.txt\" ]; then\r\n        handle_error \"Failed to copy unix_args.txt to root directory\"\r\n    fi\r\nfi\r\n\r\nlog \"Cleaning up installer\"\r\nrm -rf installer.jar\r\n\r\n# Download MSH based on architecture\r\narch=$(uname -m)\r\ncase $arch in\r\n    x86_64*)\r\n        log \"Detected X64 Architecture\"\r\n        download_with_timeout \"${MSH_D_URL}msh-linux-amd64.bin\" \"msh_server.bin\"\r\n        ;;\r\n    aarch64*)\r\n        log \"Detected aarch64 Architecture\"\r\n        download_with_timeout \"${MSH_D_URL}msh-linux-arm64.bin\" \"msh_server.bin\"\r\n        ;;\r\n    arm*)\r\n        handle_error \"ARM architecture (non-v8) is not supported\"\r\n        ;;\r\n    *)\r\n        handle_error \"Architecture detection failed: $arch\"\r\n        ;;\r\nesac\r\n\r\nchmod u+x .\/msh_server.bin\r\n\r\n# Download default configuration files if they don't exist\r\nif [ ! -f server.properties ]; then\r\n    log \"Downloading default server.properties\"\r\n    download_with_timeout \"https:\/\/raw.githubusercontent.com\/parkervcp\/eggs\/master\/minecraft\/java\/server.properties\" \"server.properties\"\r\nfi\r\n\r\nif [ ! -f msh-config.json ]; then\r\n    log \"Downloading default MSH configuration\"\r\n    download_with_timeout \"https:\/\/gist.githubusercontent.com\/BolverBlitz\/fa895e8062fcab7dd7a54d768843a261\/raw\/7224a0694a985ba1bff0b4fe9b44f2c79e9b495e\/msh-config.json\" \"msh-config.json\"\r\nfi\r\n\r\n# Always update MSH config to use correct paths and versions\r\nif command -v jq >\/dev\/null 2>&1; then\r\n    log \"Updating MSH configuration with correct paths\"\r\n    \r\n    # Create the forge version directory structure if it doesn't exist\r\n    FORGE_DIR=\"libraries\/net\/minecraftforge\/forge\/${FULL_FORGE_VERSION}\"\r\n    mkdir -p \"${FORGE_DIR}\"\r\n    \r\n    # If we have unix_args.txt in root, link it to where Pterodactyl expects it\r\n    if [ -f \"unix_args.txt\" ]; then\r\n        log \"Creating symlink for unix_args.txt in Forge directory\"\r\n        ln -sf \"$(pwd)\/unix_args.txt\" \"${FORGE_DIR}\/unix_args.txt\"\r\n    fi\r\n    \r\n    # Convert numeric values to proper booleans\r\n    WL_IMPORT_BOOL=$([ \"${WL_IMPORT:-0}\" -eq 1 ] && echo \"true\" || echo \"false\")\r\n    SUSPEND_ALLOW_BOOL=$([ \"${SUSPEND_ALLOW:-0}\" -eq 1 ] && echo \"true\" || echo \"false\")\r\n    \r\n    # Create complete JSON structure\r\n    cat > msh-config.json << EOL\r\n{\r\n    \"Commands\": {\r\n        \"StartServer\": \"java <Commands.StartServerParam> -jar server.jar nogui\",\r\n        \"StartServerParam\": \"-Xms256M -Xmx6000M -Dterminal.jline=false -Dterminal.ansi=true @unix_args.txt\",\r\n        \"StopServer\": \"stop\",\r\n        \"StopServerAllowKill\": 30\r\n    },\r\n    \"FileName\": \"server.jar\",\r\n    \"Msh\": {\r\n        \"Debug\": 3,\r\n        \"EnableQuery\": false,\r\n        \"ID\": \"$(uuidgen || echo \"default-id\")\",\r\n        \"InfoHibernation\": \"Server is hibernating\",\r\n        \"InfoStarting\": \"Server is starting\",\r\n        \"MshPort\": 0,\r\n        \"MshPortQuery\": 0,\r\n        \"NotifyMessage\": true,\r\n        \"NotifyUpdate\": true,\r\n        \"ShowInternetUsage\": false,\r\n        \"ShowResourceUsage\": false,\r\n        \"SuspendAllow\": ${SUSPEND_ALLOW_BOOL},\r\n        \"SuspendRefresh\": 30,\r\n        \"TimeBeforeStoppingEmptyServer\": 120,\r\n        \"Whitelist\": [],\r\n        \"WhitelistImport\": ${WL_IMPORT_BOOL}\r\n    },\r\n    \"Port\": 8080,\r\n    \"Server\": {\r\n        \"FileName\": \"server.jar\",\r\n        \"Folder\": \".\/\",\r\n        \"Version\": \"${MC_VERSION}\"\r\n    }\r\n}\r\nEOL\r\n\r\n    # Verify JSON is valid\r\n    if ! jq '.' msh-config.json >\/dev\/null 2>&1; then\r\n        handle_error \"Generated MSH configuration is not valid JSON\"\r\n    fi\r\n    \r\n    # Verify required fields\r\n    if ! jq -e '\r\n        .Commands.StartServer and\r\n        .Commands.StartServerParam and\r\n        .Server.FileName and\r\n        .Server.Folder and\r\n        (.Commands.StartServerParam | contains(\"@unix_args.txt\"))\r\n    ' msh-config.json >\/dev\/null; then\r\n        handle_error \"MSH configuration is missing required fields\"\r\n    fi\r\n    \r\n    log \"MSH configuration updated successfully\"\r\nelse\r\n    handle_error \"jq is required but not found\"\r\nfi\r\n\r\n# Verify all critical files exist\r\nfor file in server.jar unix_args.txt msh_server.bin msh-config.json; do\r\n    if [ ! -f \"$file\" ]; then\r\n        handle_error \"Critical file missing: $file\"\r\n    fi\r\ndone\r\n\r\n# Set proper permissions for startup\r\nchmod u+x .\/msh_server.bin\r\nchmod u+x .\/server.jar\r\n\r\nlog \"Installation completed successfully\"\r\nlog \"IMPORTANT: The server is configured to use unix_args.txt from the root directory\"\r\n# Note: Server startup is handled by Pterodactyl's startup configuration",
            "container": "openjdk:8-jdk-slim",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "Minecraft Version (Releases only)",
            "description": "The version of minecraft to download. \r\n\r\nLeave at latest to always get the latest version. Invalid versions will default to latest.\r\nThis does not support snapschots, to use a snapshot please download the .jar, rename it server.jar and look up the Minecraft Protocol version and edit config.json.",
            "env_variable": "MC_VERSION",
            "default_value": "latest",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:20",
            "field_type": "text"
        },
        {
            "name": "Server Jar File",
            "description": "The name of the server jarfile to run the server with.",
            "env_variable": "SERVER_JARFILE",
            "default_value": "server.jar",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:20",
            "field_type": "text"
        },
        {
            "name": "Download Path",
            "description": "A URL to use to download a server.jar rather than the ones in the install script. This is not user viewable.",
            "env_variable": "DOWNLOAD_URL",
            "default_value": "",
            "user_viewable": false,
            "user_editable": false,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Build Number",
            "description": "The build number for the paper release.\r\n\r\nLeave at latest to always get the latest version. Invalid versions will default to latest.",
            "env_variable": "BUILD_NUMBER",
            "default_value": "latest",
            "user_viewable": false,
            "user_editable": false,
            "rules": "required|string|max:20",
            "field_type": "text"
        },
        {
            "name": "Vendor",
            "description": "Here you can write any Text that will be displayed as Server Jar in Minecraft",
            "env_variable": "VENDOR",
            "default_value": "Paper",
            "user_viewable": false,
            "user_editable": false,
            "rules": "required|string|max:20",
            "field_type": "text"
        },
        {
            "name": "MSH-Download URL",
            "description": "Webserver that serves the binary file of MSH",
            "env_variable": "MSH_D_URL",
            "default_value": "https:\/\/msh.gekware.net\/builds\/egg\/",
            "user_viewable": false,
            "user_editable": false,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Wait time for shutdown",
            "description": "This is the time in seconds the server should stay online without players",
            "env_variable": "TBSES",
            "default_value": "120",
            "user_viewable": true,
            "user_editable": false,
            "rules": "required|integer|between:0,60000",
            "field_type": "text"
        },
        {
            "name": "TimeToKill",
            "description": "This is the time, MSH will kill the server after sending a stop event and \/save-all",
            "env_variable": "KILL_TIME",
            "default_value": "30",
            "user_viewable": true,
            "user_editable": false,
            "rules": "required|integer|between:0,60000",
            "field_type": "text"
        },
        {
            "name": "Debug Level",
            "description": "Debug Level for MSH. 1-3, 3 logging everything.",
            "env_variable": "DEBUG_LVL",
            "default_value": "3",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|integer|between:1,4",
            "field_type": "text"
        },
        {
            "name": "Hib-Info",
            "description": "MOTD when the server is currently not running",
            "env_variable": "HIB_INFO",
            "default_value": "Currently not working",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:200",
            "field_type": "text"
        },
        {
            "name": "Hib-Starting",
            "description": "MOTD when the minecraft server is starting",
            "env_variable": "HIB_START",
            "default_value": "Currently not working",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:200",
            "field_type": "text"
        },
        {
            "name": "Char",
            "description": "Do not edit this",
            "env_variable": "CONST_CHAR",
            "default_value": "&quot;",
            "user_viewable": false,
            "user_editable": false,
            "rules": "required|string|max:10",
            "field_type": "text"
        },
        {
            "name": "SuspendAllow",
            "description": "When set to true (1) msh will not run \/stop, it will hibernate the process. This should free up system memory and put the server into swap (More info: https:\/\/wiki.archlinux.org\/title\/Power_management\/Suspend_and_hibernate)",
            "env_variable": "SUSPEND_ALLOW",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": false,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "SuspendRefresh",
            "description": "This value in seconds will toggle the hibernate state because minecraft thinks it ran into some error if it gets hibernated. This value depends on many variables like memory speed, cpu speed\/usage, i\/o wait and the minecraft software beeing used.",
            "env_variable": "SUSPEND_REFRESH",
            "default_value": "30",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|integer|between:0,60000",
            "field_type": "text"
        },
        {
            "name": "wlimport",
            "description": "When set to true (1) msh will only start the server when a player from the whitelist is trying to connect",
            "env_variable": "WL_IMPORT",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Forge Version",
            "description": "",
            "env_variable": "FORGE_VERSION",
            "default_value": "",
            "user_viewable": false,
            "user_editable": false,
            "rules": "required|string|max:20",
            "field_type": "text"
        }
    ]
}